@page "/planning"
@using System.Globalization
@using CsvHelper
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore
@using PlanningPresenceBlazor.Data
@using PlanningPresenceBlazor.Services
@inject PlanningService PlanningService
@inject ToastService ToastService
@inject NotificationService NotificationService
@inject PlanningDbContext DbContext
@inject IJSRuntime JS
@using CleanPresenceStatus = TeamScheduler.Core.Enums.PresenceStatus
@using CorePresenceStatus = TeamScheduler.Core.Enums.PresenceStatus

<!-- En-tête de page -->
<div class="page-header">
    <h1 class="page-title">
        <i class="bi bi-calendar-check"></i>
        Planning Hebdomadaire
    </h1>
    <p class="page-subtitle">Générez et gérez votre planning de présence</p>
</div>

<!-- Panneau de configuration -->
<div class="card card-modern mb-4">
    <div class="card-body">
        <div class="row g-4 align-items-end">
            <div class="col-md-3">
                <label class="form-label fw-bold">
                    <i class="bi bi-calendar3"></i> Semaine de
                </label>
                <InputDate @bind-Value="selectedDate"
                           class="form-control form-control-modern"
                           @onchange="OnDateChanged" />
                <div class="form-text">
                    Du @GetMondayOfWeek(selectedDate).ToString("dd/MM/yyyy")
                    au @GetMondayOfWeek(selectedDate).AddDays(4).ToString("dd/MM/yyyy")
                </div>
            </div>

            <div class="col-md-3">
                <label class="form-label fw-bold">
                    <i class="bi bi-file-earmark-spreadsheet"></i> Importer congés (CSV)
                </label>
                <InputFile OnChange="HandleFileUpload"
                           class="form-control form-control-modern"
                           accept=".csv" />
                <div class="form-text">Format: Nom, Date début, Date fin, Raison, Type</div>
            </div>

            <div class="col-md-2">
                <button class="btn btn-primary btn-modern w-100"
                        @onclick="GeneratePlanning"
                        disabled="@isLoading">
                    @if (isLoading)
                    {
                            <div class="spinner-border spinner-border-sm me-2"></div>
                    }
                    else
                    {
                            <i class="bi bi-gear-fill me-2"></i>
                    }
                    Générer Planning
                </button>
            </div>

            <div class="col-md-2">
                <button class="btn btn-success btn-modern w-100"
                        @onclick="ExportCsv"
                        disabled="@(planningResult == null || isLoading)">
                    <i class="bi bi-download me-2"></i>
                    Exporter
                </button>
            </div>

            <div class="col-md-2">
                <button class="btn btn-info btn-modern w-100"
                        @onclick="ShowNotificationModal"
                        disabled="@(planningResult == null || isLoading)">
                    <i class="bi bi-send me-2"></i>
                    Notifier
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Statistiques -->
@if (planningResult != null)
{
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-people-fill fs-2 text-primary me-3"></i>
                        <div>
                            <h5 class="mb-0">@planningResult.TotalEmployes</h5>
                            <small class="text-muted">Employés actifs</small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-calendar-x fs-2 text-warning me-3"></i>
                        <div>
                            <h5 class="mb-0">@planningResult.EmployesEnConge</h5>
                            <small class="text-muted">En congé cette semaine</small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-check-circle fs-2 text-success me-3"></i>
                        <div>
                            <h5 class="mb-0">@GetTotalPresences()</h5>
                            <small class="text-muted">Total présences</small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="stats-card">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-percent fs-2 text-info me-3"></i>
                        <div>
                            <h5 class="mb-0">@GetCoveragePercentage()%</h5>
                            <small class="text-muted">Couverture moyenne</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
}

<!-- Alertes et avertissements -->
@if (planningResult?.Warnings.Any() == true)
{
        <div class="alert warning-alert mb-4">
            <h6><i class="bi bi-exclamation-triangle-fill me-2"></i>Avertissements</h6>
        @foreach (var warning in planningResult.Warnings)
        {
                    <div class="mb-1">@warning</div>
        }
        </div>
}

<!-- Message contextuel -->
@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @MessageCssClass">@Message</div>
}

<!-- Tableau du planning -->
@if (planningResult != null)
{
        <div class="card card-modern">
            <div class="card-header bg-transparent">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-table me-2"></i>
                        Planning du @GetMondayOfWeek(selectedDate).ToString("dd/MM/yyyy")
                        au @GetMondayOfWeek(selectedDate).AddDays(4).ToString("dd/MM/yyyy")
                    </h5>
                    <div class="d-flex gap-2">
                        <span class="badge status-present">Présent</span>
                        <span class="badge status-conge">Congé</span>
                        <span class="badge status-absent">Absent</span>
                    </div>
                </div>
            </div>

            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="@GetTableClass()">
                        <thead>
                            <tr>
                                <th class="fw-bold">
                                    <i class="bi bi-person-fill me-2"></i>Employé
                                </th>
                            @foreach (var day in WeekDays)
                            {
                                        <th class="text-center fw-bold">
                                    @day
                                            <br>
                                            <small class="fw-normal">
                                        @GetDateForDay(day).ToString("dd/MM")
                                            </small>
                                        </th>
                            }
                                <th class="text-center fw-bold">
                                    <i class="bi bi-bar-chart-fill me-1"></i>Total
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var employee in planningResult.Planning.OrderBy(x => employeNomComplet.TryGetValue(x.Key, out var nomComplet) ? nomComplet : x.Key))
                        {
                                    <tr>
                                        <td class="fw-bold">
                                            <i class="bi bi-person-circle me-2 text-primary"></i>
                                    @(employeNomComplet.TryGetValue(employee.Key, out var nomComplet) ? nomComplet : employee.Key)
                                        </td>
                                @foreach (var day in WeekDays)
                                {
                                    var presence = employee.Value[day];
                                                <td class="text-center @GetCellStatusClass(ConvertToCorePresenceStatus(presence.Status))">
                                                    <span class="@GetStatusBadgeClass(ConvertToCorePresenceStatus(presence.Status))"
                                                          title="@presence.Note">
                                            @GetStatusText(ConvertToCorePresenceStatus(presence.Status))
                                                    </span>
                                        @if (!string.IsNullOrEmpty(presence.Note))
                                        {
                                                            <br>
                                                            <small class="text-muted">@presence.Note</small>
                                        }
                                                </td>
                                }
                                        <td class="text-center">
                                            <span class="badge bg-primary">
                                        @employee.Value.Count(x => (CorePresenceStatus)x.Value.Status == CorePresenceStatus.Present)
                                            </span>
                                        </td>
                                    </tr>
                        }
                        </tbody>
                        <tfoot class="table-light">
                            <tr>
                                <th>Total présents par jour</th>
                            @foreach (var day in WeekDays)
                            {
                                var presents = planningResult.Planning.Where(x => (CorePresenceStatus)x.Value[day].Status == CorePresenceStatus.Present)
                                    .Select(x => employeNomComplet.TryGetValue(x.Key, out var nc) ? nc : x.Key).ToList();
                                <th class="text-center">
                                    @if (presents.Count <= 3)
                                    {
                                        @foreach (var name in presents)
                                        {
                                            <span class="badge bg-success me-1">@name</span>
                                        }
                                    }
                                    else
                                    {
                                        @foreach (var name in presents.Take(3))
                                        {
                                            <span class="badge bg-success me-1">@name</span>
                                        }
                                        <span class="badge bg-info" style="cursor:pointer" @onclick="() => ShowFullListModal(day, presents)">
                                            +@((presents.Count - 3)) autres
                                        </span>
                                    }
                                </th>
                            }
                                <th class="text-center">
                                    @GetTotalPresences()
                                </th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
}
else
{
        <div class="card card-modern">
            <div class="card-body text-center py-5">
                <i class="bi bi-calendar3 fs-1 text-muted mb-3"></i>
                <h5 class="text-muted">Aucun planning généré</h5>
                <p class="text-muted">Sélectionnez une date et cliquez sur "Générer Planning" pour commencer.</p>
            </div>
        </div>
}

<!-- Modal de notification -->
@if (showNotificationModal && notificationPreviews.Any())
{
        <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-send me-2"></i>
                            Envoyer les notifications de planning
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseNotificationModal"></button>
                    </div>

                    <div class="modal-body">
                        <!-- Sélection du mode de notification -->
                        <div class="row mb-4">
                            <div class="col-md-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="notificationMethod" 
                                           value="Email" @onchange="() => selectedNotificationMethod = NotificationMethod.Email" 
                                           checked="@(selectedNotificationMethod == NotificationMethod.Email)" />
                                    <label class="form-check-label">
                                        <i class="bi bi-envelope me-2"></i>Email
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="notificationMethod" 
                                           value="SMS" @onchange="() => selectedNotificationMethod = NotificationMethod.SMS" 
                                           checked="@(selectedNotificationMethod == NotificationMethod.SMS)" />
                                    <label class="form-check-label">
                                        <i class="bi bi-phone me-2"></i>SMS
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="notificationMethod" 
                                           value="Teams" @onchange="() => selectedNotificationMethod = NotificationMethod.Teams" 
                                           checked="@(selectedNotificationMethod == NotificationMethod.Teams)" />
                                    <label class="form-check-label">
                                        <i class="bi bi-microsoft-teams me-2"></i>Teams
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Mode test -->
                        <div class="alert alert-info">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="testMode" id="testMode" />
                                <label class="form-check-label" for="testMode">
                                    <strong>Mode test</strong> - Les notifications ne seront pas réellement envoyées (recommandé pour les tests)
                                </label>
                            </div>
                        </div>

                        <!-- Prévisualisation des notifications -->
                        <h6>Prévisualisation des notifications (@notificationPreviews.Count employé(s))</h6>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Employé</th>
                                        <th>Contact</th>
                                        <th>Jours présents</th>
                                        <th>Disponibilité</th>
                                    </tr>
                                </thead>
                                <tbody>
                                @foreach (var preview in notificationPreviews)
                                {
                                            <tr>
                                                <td class="fw-bold">@preview.EmployeeName</td>
                                                <td>
                                            @if (selectedNotificationMethod == NotificationMethod.Email)
                                            {
                                                            <span class="@(preview.HasEmail ? "text-success" : "text-danger")">
                                                                <i class="bi bi-@(preview.HasEmail ? "check" : "x")-circle me-1"></i>
                                                    @preview.Email
                                                            </span>
                                            }
                                            else if (selectedNotificationMethod == NotificationMethod.SMS)
                                            {
                                                            <span class="@(preview.HasPhone ? "text-success" : "text-danger")">
                                                                <i class="bi bi-@(preview.HasPhone ? "check" : "x")-circle me-1"></i>
                                                    @preview.Telephone
                                                            </span>
                                            }
                                            else
                                            {
                                                            <span class="@(preview.HasTeams ? "text-success" : "text-danger")">
                                                                <i class="bi bi-@(preview.HasTeams ? "check" : "x")-circle me-1"></i>
                                                    @preview.TeamsId
                                                            </span>
                                            }
                                                </td>
                                                <td>
                                            @foreach (var day in preview.PresentDays)
                                            {
                                                            <span class="badge bg-success me-1">@day</span>
                                            }
                                                </td>
                                                <td>
                                            @{
                                                var canReceive = selectedNotificationMethod switch
                                                {
                                                    NotificationMethod.Email => preview.HasEmail,
                                                    NotificationMethod.SMS => preview.HasPhone,
                                                    NotificationMethod.Teams => preview.HasTeams,
                                                    _ => false
                                                };
                                            }
                                            @if (canReceive)
                                            {
                                                            <span class="badge bg-success">Disponible</span>
                                            }
                                            else
                                            {
                                                            <span class="badge bg-danger">Non configuré</span>
                                            }
                                                </td>
                                            </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseNotificationModal">
                            Annuler
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="SendNotifications" disabled="@isSendingNotifications">
                        @if (isSendingNotifications)
                        {
                                    <div class="spinner-border spinner-border-sm me-2"></div>
                        }
                        else
                        {
                                    <i class="bi bi-send me-2"></i>
                        }
                        @(testMode ? "Tester l'envoi" : "Envoyer les notifications")
                        </button>
                    </div>
                </div>
            </div>
        </div>
}

<!-- Modal pour la liste complète des présents -->
@if (showFullListModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-people me-2"></i>
                        Présents le @selectedDayForModal
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => showFullListModal = false"></button>
                </div>
                <div class="modal-body">
                    <ul class="list-group">
                        @foreach (var name in selectedNamesForModal)
                        {
                            <li class="list-group-item">@name</li>
                        }
                    </ul>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showFullListModal = false">Fermer</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter] public string ThemeClass { get; set; } = "theme-light";

    private DateTime selectedDate = DateTime.Today;
    private PlanningResult? planningResult;
    private bool isLoading = false;
    private bool showNotificationModal = false;
    private bool isSendingNotifications = false;
    private bool testMode = true;
    private NotificationMethod selectedNotificationMethod = NotificationMethod.Email;
    private List<NotificationPreview> notificationPreviews = new();
    private Dictionary<string, string> employeNomComplet = new(); // nom court -> Prénom + Nom
    private static readonly string[] WeekDays = { "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi" };

    private string? Message;
    private string MessageCssClass = "alert-info";

    // État pour le modal de liste complète des présents
    private bool showFullListModal = false;
    private string selectedDayForModal = string.Empty;
    private List<string> selectedNamesForModal = new();

    protected override async Task OnInitializedAsync()
    {
        selectedDate = GetMondayOfWeek(DateTime.Today);
        await ChargerNomsCompletsEmployes();
        await GeneratePlanning();
    }

    private async Task OnDateChanged()
    {
        selectedDate = GetMondayOfWeek(selectedDate);
        await GeneratePlanning();
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        if (e.File == null) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            using var reader = new StreamReader(e.File.OpenReadStream());
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);

            var conges = csv.GetRecords<CongeCsv>().ToList();

            if (conges.Any())
            {
                // Restreindre la suppression à la semaine affichée
                var weekStart = GetMondayOfWeek(selectedDate);
                var weekEnd = weekStart.AddDays(6);
                var success = await PlanningService.SaveCongesToDbAsync(conges, weekStart, weekEnd);

                if (success)
                {
                    ToastService.ShowSuccess($"✅ {conges.Count} congé(s) importé(s) avec succès", "Import réussi");
                    await GeneratePlanning();
                }
                else
                {
                    ToastService.ShowError("Erreur lors de l'import des congés", "Erreur d'import");
                }
            }
            else
            {
                ToastService.ShowWarning("Aucun congé trouvé dans le fichier", "Fichier vide");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de la lecture du fichier: {ex.Message}", "Erreur");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GeneratePlanning()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var mondayOfWeek = GetMondayOfWeek(selectedDate);
            // Régénérer le planning (permettre la régénération pour la même semaine)
            planningResult = await PlanningService.GeneratePlanningAsync(mondayOfWeek);

            Message = "Planning généré avec succès.";
            MessageCssClass = "alert-success";
        }
        catch (Exception ex)
        {
            Message = $"Erreur lors de la génération du planning : {ex.Message}";
            MessageCssClass = "alert-danger";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ChargerNomsCompletsEmployes()
    {
        // Récupérer tous les employés actifs pour la correspondance nom court -> nom complet
        var employes = await DbContext.Employes
            .Where(e => e.EstActif)
            .ToListAsync();
        
        employeNomComplet.Clear();
        foreach (var emp in employes)
        {
            var nomComplet = string.IsNullOrWhiteSpace(emp.Prenom) ? emp.Nom : $"{emp.Prenom} {emp.Nom}";
            if (!employeNomComplet.ContainsKey(emp.Nom))
            {
                employeNomComplet[emp.Nom] = nomComplet;
            }
        }
    }

    private async Task ExportCsv()
    {
        if (planningResult == null) return;

        try
        {
            var csvData = await PlanningService.ExportPlanningToCsvAsync(planningResult.Planning);
            var fileName = $"planning_{GetMondayOfWeek(selectedDate):yyyy-MM-dd}.csv";

            await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(csvData), "text/csv");
            ToastService.ShowSuccess("Planning exporté avec succès", "Export terminé");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de l'export: {ex.Message}", "Erreur d'export");
        }
    }

    private async Task ShowNotificationModal()
    {
        if (planningResult == null) return;

        try
        {
            var notifications = PlanningService.GeneratePresenceNotifications(planningResult.Planning, planningResult.WeekStart);
            notificationPreviews = await NotificationService.GenerateNotificationPreviews(notifications);
            showNotificationModal = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de la préparation: {ex.Message}", "Erreur");
        }
    }

    private void CloseNotificationModal()
    {
        showNotificationModal = false;
        notificationPreviews.Clear();
    }

    private async Task SendNotifications()
    {
        if (planningResult == null || !notificationPreviews.Any()) return;

        try
        {
            isSendingNotifications = true;
            StateHasChanged();

            var notifications = PlanningService.GeneratePresenceNotifications(planningResult.Planning, planningResult.WeekStart);
            var result = await NotificationService.SendPlanningNotificationsAsync(notifications, selectedNotificationMethod, testMode);

            if (result.HasErrors)
            {
                ToastService.ShowWarning(
                    $"✅ {result.TotalSent} envoyé(s), ❌ {result.TotalFailed} échec(s)",
                    "Envoi partiellement réussi"
                );
            }
            else
            {
                ToastService.ShowSuccess(
                    $"✅ {result.TotalSent} notification(s) envoyée(s) avec succès",
                    testMode ? "Test réussi" : "Envoi réussi"
                );
            }

            CloseNotificationModal();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de l'envoi: {ex.Message}", "Erreur de notification");
        }
        finally
        {
            isSendingNotifications = false;
            StateHasChanged();
        }
    }

    private void ShowFullListModal(string day, List<string> names)
    {
        selectedDayForModal = day;
        selectedNamesForModal = names;
        showFullListModal = true;
    }

    // Conversion explicite entre enums Service/Core
    private CorePresenceStatus ConvertToCorePresenceStatus(PlanningPresenceBlazor.Services.PresenceStatus status)
    {
        return status switch
        {
            PlanningPresenceBlazor.Services.PresenceStatus.Present => CorePresenceStatus.Present,
            PlanningPresenceBlazor.Services.PresenceStatus.Absent => CorePresenceStatus.Absent,
            PlanningPresenceBlazor.Services.PresenceStatus.Conge => CorePresenceStatus.OnLeave,
            _ => CorePresenceStatus.Absent
        };
    }

    // Méthodes utilitaires
    private DateTime GetMondayOfWeek(DateTime date)
    {
        int daysFromMonday = ((int)date.DayOfWeek - 1 + 7) % 7;
        return date.AddDays(-daysFromMonday);
    }

    private DateTime GetDateForDay(string dayName)
    {
        var monday = GetMondayOfWeek(selectedDate);
        return dayName switch
        {
            "Lundi" => monday,
            "Mardi" => monday.AddDays(1),
            "Mercredi" => monday.AddDays(2),
            "Jeudi" => monday.AddDays(3),
            "Vendredi" => monday.AddDays(4),
            _ => monday
        };
    }

    private string GetStatusClass(CleanPresenceStatus status)
    {
        return status switch
        {
            CleanPresenceStatus.Present => "status-present",
            CleanPresenceStatus.OnLeave => "status-conge",
            _ => "status-absent"
        };
    }

    private string GetStatusText(CleanPresenceStatus status)
    {
        return status switch
        {
            CleanPresenceStatus.Present => "Présent",
            CleanPresenceStatus.OnLeave => "Congé",
            _ => "Absent"
        };
    }

    private int GetTotalPresences()
    {
        if (planningResult == null) return 0;

        return planningResult.Planning
            .SelectMany(x => x.Value.Values)
            .Count(x => (CorePresenceStatus)x.Status == CorePresenceStatus.Present);
    }

    private int GetCoveragePercentage()
    {
        if (planningResult == null) return 0;

        var totalSlots = planningResult.Planning.Count * WeekDays.Length;
        var filledSlots = GetTotalPresences();

        return totalSlots > 0 ? (filledSlots * 100) / totalSlots : 0;
    }

    private string GetCellStatusClass(CorePresenceStatus status)
    {
        return status switch
        {
            CorePresenceStatus.Present => "table-success",
            CorePresenceStatus.OnLeave => "table-warning",
            CorePresenceStatus.Absent => "table-danger",
            _ => ""
        };
    }

    private string GetTableClass() => ThemeClass == "theme-dark" ? "table table-modern table-dark mb-0" : "table table-modern mb-0";
    private string GetStatusBadgeClass(CorePresenceStatus status)
    {
        return status switch
        {
            CorePresenceStatus.Present => "badge bg-success",
            CorePresenceStatus.Absent => "badge bg-danger",
            CorePresenceStatus.OnLeave => "badge bg-warning text-dark",
            CorePresenceStatus.PartialDay => "badge bg-info text-dark",
            CorePresenceStatus.Remote => "badge bg-primary",
            _ => "badge bg-secondary"
        };
    }
}

<script>
    window.downloadFile = function (filename, content, contentType) {
        const link = document.createElement('a');
        link.download = filename;
        link.href = `data:${contentType};base64,${content}`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>
