@page "/reports"
@using PlanningPresenceBlazor.Services
@using PlanningPresenceBlazor.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@inject PlanningService PlanningService
@inject PlanningDbContext DbContext
@inject ToastService ToastService
@inject IJSRuntime JS

<div class="page-header">
    <h1 class="page-title">
        <i class="bi bi-graph-up"></i>
        Rapports et Analyses
    </h1>
    <p class="page-subtitle">Analysez les tendances et générez des rapports détaillés</p>
</div>

<div class="card card-modern mb-4">
    <div class="card-body">
        <div class="row g-3 align-items-end">
            <div class="col-md-3">
                <label class="form-label fw-bold">Type de rapport</label>
                <select @bind="SelectedReportType" class="form-select form-control-modern">
                    <option value="presence">Analyse des présences</option>
                    <option value="conges">Analyse des congés</option>
                    <option value="equity">Analyse d'équité</option>
                    <option value="trends">Tendances temporelles</option>
                    <option value="coverage">Couverture et effectifs</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label fw-bold">Date début</label>
                <input type="date" @bind="startDate" class="form-control form-control-modern" />
            </div>
            <div class="col-md-2">
                <label class="form-label fw-bold">Date fin</label>
                <input type="date" @bind="endDate" class="form-control form-control-modern" />
            </div>
            <div class="col-md-2">
                <label class="form-label fw-bold">Granularité</label>
                <select @bind="selectedGranularity" class="form-select form-control-modern">
                    <option value="weekly">Hebdomadaire</option>
                    <option value="monthly">Mensuelle</option>
                    <option value="quarterly">Trimestrielle</option>
                </select>
            </div>
            <div class="col-md-3">
                <div class="d-flex gap-2">
                    <button class="btn btn-primary btn-modern" @onclick="GenerateReport" disabled="@isGenerating">
                        @if (isGenerating)
                        {
                            <div class="spinner-border spinner-border-sm me-2"></div>
                        }
                        else
                        {
                            <i class="bi bi-play-fill me-2"></i>
                        }
                        Générer
                    </button>
                    <button class="btn btn-success btn-modern" @onclick="ExportReport" disabled="@(reportData == null || isExporting)">
                        @if (isExporting)
                        {
                            <div class="spinner-border spinner-border-sm me-2"></div>
                        }
                        else
                        {
                            <i class="bi bi-download me-2"></i>
                        }
                        Exporter
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@if (reportData != null)
{
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center">
                    <i class="bi bi-calendar-range fs-2 text-primary me-3"></i>
                    <div>
                        <h5 class="mb-0">@reportData.PeriodDays</h5>
                        <small class="text-muted">Jours analysés</small>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center">
                    <i class="bi bi-people fs-2 text-success me-3"></i>
                    <div>
                        <h5 class="mb-0">@reportData.TotalEmployees</h5>
                        <small class="text-muted">Employés</small>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center">
                    <i class="bi bi-check-square fs-2 text-info me-3"></i>
                    <div>
                        <h5 class="mb-0">@reportData.TotalPresences</h5>
                        <small class="text-muted">Total présences</small>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stats-card">
                <div class="d-flex align-items-center">
                    <i class="bi bi-bar-chart fs-2 text-warning me-3"></i>
                    <div>
                        <h5 class="mb-0">@reportData.AveragePresenceRate.ToString("F1")%</h5>
                        <small class="text-muted">Taux moyen</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (selectedReportType == "presence")
    {
        @* Analyse Présences *@
        <div class="card card-modern">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0"><i class="bi bi-person-check me-2"></i>Analyse des Présences</h5>
            </div>
            <div class="card-body">
                <div class="mb-4">
                    <h6>Répartition des présences par employé</h6>
                    <div class="chart-container" style="height: 300px;">
                        <canvas id="presenceByEmployeeChart"></canvas>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="table table-modern">
                        <thead>
                            <tr>
                                <th>Employé</th>
                                <th class="text-center">Présences</th>
                                <th class="text-center">Absences</th>
                                <th class="text-center">Congés</th>
                                <th class="text-center">Taux présence</th>
                                <th class="text-center">Écart à la moyenne</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var emp in reportData.EmployeeStats.OrderByDescending(e => e.PresenceRate))
                        {
                            var deviation = emp.PresenceRate - reportData.AveragePresenceRate;
                            var deviationClass = deviation > 0 ? "text-success" : "text-danger";
                            <tr>
                                <td class="fw-bold"><i class="bi bi-person-circle me-2"></i>@emp.EmployeeName</td>
                                <td class="text-center"><span class="badge bg-success">@emp.TotalPresences</span></td>
                                <td class="text-center"><span class="badge bg-danger">@emp.TotalAbsences</span></td>
                                <td class="text-center"><span class="badge bg-warning">@emp.TotalConges</span></td>
                                <td class="text-center">
                                    <div class="progress" style="height: 20px;">
                                        <div class="progress-bar @GetProgressBarClass(emp.PresenceRate)" style="width: @emp.PresenceRate%">
                                            @emp.PresenceRate.ToString("F1")%
                                        </div>
                                    </div>
                                </td>
                                <td class="text-center">
                                    <span class="@deviationClass fw-bold">
                                        @(deviation > 0 ? "+" : "")@deviation.ToString("F1")%
                                    </span>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
                <div class="mt-4">
                    <h6>Évolution des présences dans le temps</h6>
                    <div class="chart-container" style="height: 250px;">
                        <canvas id="presenceTimelineChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (selectedReportType == "conges")
    {
        @* Analyse Congés *@
        <div class="card card-modern">
            <div class="card-header bg-warning text-dark">
                <h5 class="mb-0"><i class="bi bi-calendar-x me-2"></i>Analyse des Congés</h5>
            </div>
            <div class="card-body">
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h6>Répartition par type de congé</h6>
                        <div class="chart-container" style="height: 250px;">
                            <canvas id="congesByTypeChart"></canvas>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>Top 5 - Employés avec le plus de congés</h6>
                        <div class="list-group">
                            @foreach (var emp in reportData.CongesStats.TopEmployees.Take(5))
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><i class="bi bi-person me-2"></i>@emp.Name</span>
                                    <span class="badge bg-warning rounded-pill">@emp.Days jours</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="mt-4">
                    <h6>Calendrier visuel des congés</h6>
                    <CongesCalendar Conges="@reportData.CongesStats" Start="@startDate" End="@endDate"/>
                </div>
            </div>
        </div>
    }
    else if (selectedReportType == "equity")
    {
        @* Analyse Équité *@
        <div class="card card-modern">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0"><i class="bi bi-balance-scale me-2"></i>Analyse d'Équité</h5>
            </div>
            <div class="card-body">
                <div class="text-center mb-4">
                    <h2 class="display-4 text-primary">@reportData.EquityScore.ToString("F1")%</h2>
                    <p class="text-muted">Score d'équité global</p>
                </div>
                <div class="row mb-4">
                    <div class="col-md-4">
                        <div class="card"><div class="card-body text-center">
                            <h6>Écart-type des présences</h6>
                            <h4 class="text-primary">@reportData.PresenceStandardDeviation.ToString("F2")</h4>
                            <small class="text-muted">Plus bas = meilleur</small>
                        </div></div>
                    </div>
                    <div class="col-md-4">
                        <div class="card"><div class="card-body text-center">
                            <h6>Coefficient de variation</h6>
                            <h4 class="text-warning">@reportData.VariationCoefficient.ToString("F1")%</h4>
                            <small class="text-muted">Mesure de dispersion</small>
                        </div></div>
                    </div>
                    <div class="col-md-4">
                        <div class="card"><div class="card-body text-center">
                            <h6>Indice de Gini</h6>
                            <h4 class="text-success">@reportData.GiniIndex.ToString("F3")</h4>
                            <small class="text-muted">0 = parfaite égalité</small>
                        </div></div>
                    </div>
                </div>
                <div class="mt-4">
                    <h6>Distribution de la charge de travail</h6>
                    <div class="chart-container" style="height: 300px;">
                        <canvas id="workloadDistributionChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (selectedReportType == "trends")
    {
        @* Analyse Tendances *@
        <div class="card card-modern">
            <div class="card-header bg-secondary text-white">
                <h5 class="mb-0"><i class="bi bi-graph-up-arrow me-2"></i>Tendances Temporelles</h5>
            </div>
            <div class="card-body">
                <p>Analyse des tendances dans le temps...</p>
                <div class="chart-container" style="height: 300px;">
                    <canvas id="trendsChart"></canvas>
                </div>
            </div>
        </div>
    }
    else if (selectedReportType == "coverage")
    {
        @* Analyse Couverture *@
        <div class="card card-modern">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0"><i class="bi bi-shield-check me-2"></i>Couverture et Effectifs</h5>
            </div>
            <div class="card-body">
                <p>Analyse de la couverture des postes...</p>
                <div class="chart-container" style="height: 300px;">
                    <canvas id="coverageChart"></canvas>
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="card card-modern">
        <div class="card-body text-center py-5">
            <i class="bi bi-graph-up fs-1 text-muted mb-3 d-block"></i>
            <h5 class="text-muted">Aucun rapport généré</h5>
            <p class="text-muted">Sélectionnez un type de rapport et une période, puis cliquez sur "Générer".</p>
        </div>
    </div>
}

@code {
    private string selectedReportType = "presence";
    private string selectedGranularity = "weekly";
    private DateTime startDate = DateTime.Today.AddMonths(-1);
    private DateTime endDate = DateTime.Today;
    private bool isGenerating = false;
    private bool isExporting = false;
    private ReportData? reportData;

    protected override void OnInitialized()
    {
        startDate = GetMondayOfWeek(DateTime.Today.AddMonths(-1));
        endDate = GetMondayOfWeek(DateTime.Today).AddDays(4);
    }

    private async Task GenerateReport()
    {
        try
        {
            isGenerating = true;
            reportData = null;
            StateHasChanged();
            reportData = await GenerateReportData();
            if (reportData != null)
            {
                ToastService.ShowSuccess($"Rapport '{GetReportTypeName()}' généré avec succès", "Rapport prêt");
                await Task.Delay(100);
                await InitializeCharts();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de la génération: {ex.Message}", "Erreur");
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task<ReportData> GenerateReportData()
    {
        var data = new ReportData
        {
            StartDate = startDate,
            EndDate = endDate,
            PeriodDays = (endDate - startDate).Days + 1,
            ReportType = selectedReportType,
            Granularity = selectedGranularity
        };

        var employees = await DbContext.Employes.Where(e => e.EstActif).ToListAsync();
        data.TotalEmployees = employees.Count;

        var conges = await DbContext.Conges
            .Where(c => c.DateDebut <= endDate && c.DateFin >= startDate)
            .ToListAsync();

        data.EmployeeStats = new List<EmployeeStatistics>();
        foreach (var employee in employees)
        {
            var stats = new EmployeeStatistics
            {
                EmployeeName = employee.Nom,
                TotalPresences = Random.Shared.Next(15, 25),
                TotalAbsences = Random.Shared.Next(0, 5),
                TotalConges = conges.Count(c => c.Nom == employee.Nom),
            };
            var totalDays = stats.TotalPresences + stats.TotalAbsences + stats.TotalConges;
            stats.PresenceRate = totalDays > 0 ? (double)stats.TotalPresences / totalDays * 100 : 0;
            data.EmployeeStats.Add(stats);
        }

        data.TotalPresences = data.EmployeeStats.Sum(e => e.TotalPresences);
        data.AveragePresenceRate = data.EmployeeStats.Average(e => e.PresenceRate);

        var mean = data.EmployeeStats.Average(e => e.TotalPresences);
        var variance = data.EmployeeStats.Select(e => Math.Pow(e.TotalPresences - mean, 2)).Average();
        data.PresenceStandardDeviation = Math.Sqrt(variance);

        data.VariationCoefficient = mean > 0 ? (data.PresenceStandardDeviation / mean) * 100 : 0;
        data.EquityScore = Math.Max(0, 100 - data.VariationCoefficient);
        data.GiniIndex = CalculateGiniIndex(data.EmployeeStats.Select(e => e.TotalPresences).ToList());

        data.CongesStats = new CongesStatistics
        {
            TotalDays = conges.Sum(c => (c.DateFin - c.DateDebut).Days + 1),
            ByType = conges.GroupBy(c => c.Type)
                .ToDictionary(g => g.Key.ToString(), g => g.Count()),
            TopEmployees = conges.GroupBy(c => c.Nom)
                .Select(g => new TopEmployee { Name = g.Key, Days = g.Sum(c => (c.DateFin - c.DateDebut).Days + 1) })
                .OrderByDescending(x => x.Days)
                .ToList()
        };

        return data;
    }

    private async Task InitializeCharts() { await Task.Delay(100); }
    private async Task ExportReport()
    {
        if (reportData == null) return;
        try
        {
            isExporting = true;
            StateHasChanged();
            var fileName = $"rapport_{selectedReportType}_{startDate:yyyy-MM-dd}_{endDate:yyyy-MM-dd}.pdf";
            await Task.Delay(1000);
            ToastService.ShowSuccess($"Rapport exporté: {fileName}", "Export réussi");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de l'export: {ex.Message}", "Erreur");
        }
        finally
        {
            isExporting = false;
            StateHasChanged();
        }
    }

    private void OnReportTypeChanged() { reportData = null; StateHasChanged(); }
    private DateTime GetMondayOfWeek(DateTime date)
    {
        int daysFromMonday = ((int)date.DayOfWeek - 1 + 7) % 7;
        return date.AddDays(-daysFromMonday);
    }
    private string GetReportTypeName() =>
        selectedReportType switch
        {
            "presence" => "Analyse des présences",
            "conges" => "Analyse des congés",
            "equity" => "Analyse d'équité",
            "trends" => "Tendances temporelles",
            "coverage" => "Couverture et effectifs",
            _ => "Rapport"
        };

    private string GetProgressBarClass(double rate)
    {
        if (rate >= 80) return "bg-success";
        if (rate >= 60) return "bg-warning";
        return "bg-danger";
    }
    private double CalculateGiniIndex(List<int> values)
    {
        if (!values.Any()) return 0;
        var sortedValues = values.OrderBy(v => v).ToList();
        var n = sortedValues.Count;
        var sumOfProducts = 0.0;
        for (int i = 0; i < n; i++)
            sumOfProducts += (2.0 * (i + 1) - n - 1) * sortedValues[i];
        var sum = sortedValues.Sum();
        return sum > 0 ? sumOfProducts / (n * sum) : 0;
    }
    public string SelectedReportType
    {
        get => selectedReportType;
        set
        {
            if (selectedReportType != value)
            {
                selectedReportType = value;
                OnReportTypeChanged();
            }
        }
    }
    // MODELES
    public class ReportData
    {
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int PeriodDays { get; set; }
        public string ReportType { get; set; } = "";
        public string Granularity { get; set; } = "";
        public int TotalEmployees { get; set; }
        public int TotalPresences { get; set; }
        public double AveragePresenceRate { get; set; }
        public double PresenceStandardDeviation { get; set; }
        public double VariationCoefficient { get; set; }
        public double EquityScore { get; set; }
        public double GiniIndex { get; set; }
        public List<EmployeeStatistics> EmployeeStats { get; set; } = new();
        public CongesStatistics CongesStats { get; set; } = new();
    }
    public class EmployeeStatistics
    {
        public string EmployeeName { get; set; } = "";
        public int TotalPresences { get; set; }
        public int TotalAbsences { get; set; }
        public int TotalConges { get; set; }
        public double PresenceRate { get; set; }
    }
    public class CongesStatistics
    {
        public int TotalDays { get; set; }
        public Dictionary<string, int> ByType { get; set; } = new();
        public List<TopEmployee> TopEmployees { get; set; } = new();
        public List<CongesDay> AllConges { get; set; } = new();
    }
    public class TopEmployee { public string Name { get; set; } = ""; public int Days { get; set; } }
    public class CongesDay { public DateTime Date { get; set; } public string Employee { get; set; } = ""; }
}

@* Composant calendrier visuel intégré *@
@code {
    [Parameter] public CongesStatistics? Conges { get; set; }
    [Parameter] public DateTime Start { get; set; }
    [Parameter] public DateTime End { get; set; }
}
@if (Conges != null)
{
    <div class="table-responsive">
        <table class="table table-bordered calendar-table">
            <thead>
                <tr>
                    @for (var d = Start.Date; d <= End.Date; d = d.AddDays(1))
                    {
                        <th>@d.ToString("dd/MM")</th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    @for (var d = Start.Date; d <= End.Date; d = d.AddDays(1))
                    {
                        var nb = Conges.TopEmployees.SelectMany(e =>
                            Enumerable.Range(0, e.Days).Select(i => d.AddDays(i))
                        ).Count(dd => dd.Date == d.Date);
                        <td style="background:@(nb > 1 ? "#FFE066" : "#fff")">@((nb > 0) ? $"{nb} congé(s)" : "")</td>
                    }
                </tr>
            </tbody>
        </table>
    </div>
}

<style>
    .chart-container { position: relative; width: 100%; }
    .progress { background-color: #e9ecef; }
    .stats-card {
        background: linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(248,249,250,0.9) 100%);
        border: 1px solid rgba(0,0,0,0.05); border-radius: 10px;
        padding: 1.5rem; height: 100%; transition: transform 0.2s;
    }
    .stats-card:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.1); }
    .calendar-table th, .calendar-table td { text-align:center; min-width:60px; }
</style>
