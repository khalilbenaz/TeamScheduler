@page "/teams"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using PlanningPresenceBlazor.Data
@using PlanningPresenceBlazor.Services
@inject TeamPlanningService TeamPlanningService
@inject PlanningDbContext DbContext
@inject ToastService ToastService
@inject NavigationManager Navigation

<!-- En-tête de page -->
<div class="page-header">
    <h1 class="page-title">
        <i class="bi bi-people-fill"></i>
        Gestion des Équipes
    </h1>
    <p class="page-subtitle">Gérez vos équipes, leurs membres et leurs affectations clients</p>
</div>

<!-- Actions et statistiques -->
<div class="row mb-4">
    <div class="col-md-8">
        <button class="btn btn-success btn-modern" @onclick="ShowAddTeamModal">
            <i class="bi bi-plus-circle me-2"></i>Nouvelle équipe
        </button>
        <button class="btn btn-outline-primary btn-modern ms-2" @onclick="LoadData">
            <i class="bi bi-arrow-clockwise me-2"></i>Actualiser
        </button>
    </div>
    <div class="col-md-4 text-end">
        <span class="badge bg-primary fs-6">@teams.Count équipe(s)</span>
        <span class="badge bg-success fs-6 ms-2">@teams.Sum(t => t.Membres.Count) membre(s)</span>
        <span class="badge bg-info fs-6 ms-2">@teams.Sum(t => t.Affectations.Count(a => a.EstActive)) affectation(s)</span>
    </div>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @MessageCssClass">@Message</div>
}

<!-- Liste des équipes -->
<div class="row">
    @foreach (var team in teams)
    {
        <div class="col-md-6 mb-4">
            <div class="card card-modern @(!team.EstActive ? "opacity-75" : "")">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-people me-2 text-primary"></i>
                        @team.Nom
                        @if (!string.IsNullOrEmpty(team.CodeEquipe))
                        {
                            <span class="badge bg-secondary ms-2">@team.CodeEquipe</span>
                        }
                    </h5>
                    <div>
                        @if (team.EstActive)
                        {
                            <span class="badge bg-success">Active</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Inactive</span>
                        }
                    </div>
                </div>

                <div class="card-body">
                    @if (!string.IsNullOrEmpty(team.Description))
                    {
                        <p class="text-muted small mb-3">@team.Description</p>
                    }

                    <!-- Chef d'équipe -->
                    @if (team.ChefEquipe != null)
                    {
                        <div class="mb-3">
                            <strong><i class="bi bi-person-badge me-1"></i>Chef d'équipe:</strong>
                            <span class="text-primary">@team.ChefEquipe.Nom</span>
                        </div>
                    }

                    <!-- Statistiques -->
                    <div class="row text-center mb-3">
                        <div class="col-4">
                            <div class="stat-mini">
                                <div class="stat-value">@team.Membres.Count</div>
                                <div class="stat-label">Membres</div>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="stat-mini">
                                <div class="stat-value">@team.Affectations.Count(a => a.EstActive)</div>
                                <div class="stat-label">Clients</div>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="stat-mini">
                                <div class="stat-value">@team.Membres.Count(m => m.EstActif)</div>
                                <div class="stat-label">Actifs</div>
                            </div>
                        </div>
                    </div>

                    <!-- Configuration -->
                    <div class="config-info mb-3">
                        <small class="text-muted">
                            <i class="bi bi-gear me-1"></i>
                            Présences: @team.PresencesMinParPersonne-@team.PresencesMaxParPersonne/semaine,
                            @team.PresencesMinParJour-@team.PresencesMaxParJour/jour
                        </small>
                    </div>

                    <!-- Actions -->
                    <div class="d-flex gap-2">
                        <button class="btn btn-primary btn-sm" @onclick="() => ViewTeamDetails(team.Id)">
                            <i class="bi bi-eye me-1"></i>Détails
                        </button>
                        <button class="btn btn-outline-primary btn-sm" @onclick="() => EditTeam(team)">
                            <i class="bi bi-pencil me-1"></i>Modifier
                        </button>
                        <button class="btn btn-outline-success btn-sm" @onclick="() => ManageTeamMembers(team)">
                            <i class="bi bi-people me-1"></i>Membres
                        </button>
                        <button class="btn btn-outline-danger btn-sm" @onclick="() => ConfirmDeleteTeam(team)">
                            <i class="bi bi-trash me-1"></i>Supprimer
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (!teams.Any())
{
    <div class="card card-modern">
        <div class="card-body text-center py-5">
            <i class="bi bi-people fs-1 text-muted mb-3"></i>
            <h5 class="text-muted">Aucune équipe créée</h5>
            <p class="text-muted">Commencez par créer votre première équipe.</p>
            <button class="btn btn-primary btn-modern mt-3" @onclick="ShowAddTeamModal">
                <i class="bi bi-plus-circle me-2"></i>Créer une équipe
            </button>
        </div>
    </div>
}

@if (teams == null || !teams.Any())
{
    <div class="alert alert-warning mt-3">Aucune équipe trouvée.</div>
}

<!-- Modal de confirmation de suppression d'équipe -->
@if (showDeleteTeamModal && teamToDelete != null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-trash me-2 text-danger"></i>
                        Supprimer l'équipe
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => showDeleteTeamModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>Voulez-vous vraiment supprimer <strong>@teamToDelete.Nom</strong> ?<br />
                    Cette action est <span class="text-danger">irréversible</span>.<br />
                    Tous les membres seront désaffectés et les affectations client seront supprimées.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showDeleteTeamModal = false">Annuler</button>
                    <button class="btn btn-danger" @onclick="DeleteTeam">Supprimer</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal d'ajout/édition d'équipe -->
@if (showTeamModal && editingTeam != null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-@(isEditMode ? "pencil" : "plus-circle") me-2"></i>
                        @(isEditMode ? "Modifier" : "Créer") une équipe
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => showTeamModal = false"></button>
                </div>
                <div class="modal-body">
                    <form @onsubmit:preventDefault="true">
                        <div class="row g-3">
                            <div class="col-md-8">
                                <label class="form-label">Nom de l'équipe *</label>
                                <input @bind="editingTeam.Nom" class="form-control" placeholder="Ex: Équipe Développement" required />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Code équipe</label>
                                <input @bind="editingTeam.CodeEquipe" class="form-control" placeholder="Ex: DEV-01" />
                            </div>
                            <div class="col-12">
                                <label class="form-label">Description</label>
                                <textarea @bind="editingTeam.Description" class="form-control" rows="2" placeholder="Description de l'équipe..."></textarea>
                            </div>
                            
                            <div class="col-md-6">
                                <label class="form-label">Chef d'équipe</label>
                                <select @bind="editingTeam.ChefEquipeId" class="form-select">
                                    <option value="">-- Aucun --</option>
                                    @foreach (var employe in availableEmployees.Where(e => e.EstActif))
                                    {
                                        <option value="@employe.Id">@employe.Prenom @employe.Nom</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Statut</label>
                                <select class="form-select" @onchange="OnStatusChanged">
                                    <option value="true" selected="@(editingTeam.EstActive ? "selected" : null)">Active</option>
                                    <option value="false" selected="@(!editingTeam.EstActive ? "selected" : null)">Inactive</option>
                                </select>
                            </div>

                            <div class="col-12">
                                <hr />
                                <h6><i class="bi bi-gear me-2"></i>Configuration des présences</h6>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Présences par jour</label>
                                <div class="row g-2">
                                    <div class="col-6">
                                        <label class="form-label small">Min</label>
                                        <input @bind="editingTeam.PresencesMinParJour" type="number" min="0" max="10" class="form-control" />
                                    </div>
                                    <div class="col-6">
                                        <label class="form-label small">Max</label>
                                        <input @bind="editingTeam.PresencesMaxParJour" type="number" min="0" max="10" class="form-control" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Présences par personne/semaine</label>
                                <div class="row g-2">
                                    <div class="col-6">
                                        <label class="form-label small">Min</label>
                                        <input @bind="editingTeam.PresencesMinParPersonne" type="number" min="0" max="7" class="form-control" />
                                    </div>
                                    <div class="col-6">
                                        <label class="form-label small">Max</label>
                                        <input @bind="editingTeam.PresencesMaxParPersonne" type="number" min="0" max="7" class="form-control" />
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <label class="form-label">Présences min. jours critiques</label>
                                <input @bind="editingTeam.PresencesMinJoursCritiques" type="number" min="0" max="5" class="form-control" />
                                <small class="text-muted">Lundi, Mardi, Vendredi par défaut</small>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showTeamModal = false">Annuler</button>
                    <button class="btn btn-primary" @onclick="SaveTeam">
                        <i class="bi bi-check-circle me-1"></i>
                        @(isEditMode ? "Modifier" : "Créer")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal de gestion des membres -->
@if (showMembersModal && managingTeam != null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-people me-2"></i>
                        Gérer les membres - @managingTeam.Nom
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => showMembersModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Membres actuels (@selectedTeamMembers.Count)</h6>
                            <div class="list-group" style="max-height: 300px; overflow-y: auto;">
                                @foreach (var membre in selectedTeamMembers.OrderBy(m => m.Nom))
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@membre.Prenom @membre.Nom</strong>
                                            <br />
                                            <small class="text-muted">@membre.Poste</small>
                                            @if (managingTeam.ChefEquipeId == membre.Id)
                                            {
                                                <span class="badge bg-warning ms-2">Chef</span>
                                            }
                                        </div>
                                        <button class="btn btn-outline-danger btn-sm" 
                                                @onclick="() => RemoveMemberFromTeam(membre)"
                                                disabled="@(managingTeam.ChefEquipeId == membre.Id)">
                                            <i class="bi bi-x"></i>
                                        </button>
                                    </div>
                                }
                                @if (!selectedTeamMembers.Any())
                                {
                                    <div class="text-center text-muted py-3">
                                        <i class="bi bi-people fs-2"></i>
                                        <p>Aucun membre dans cette équipe</p>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>Employés disponibles</h6>
                            <div class="list-group" style="max-height: 300px; overflow-y: auto;">
                                @foreach (var employe in availableEmployees.Where(e => e.EquipeId == null && e.EstActif).OrderBy(e => e.Nom))
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@employe.Prenom @employe.Nom</strong>
                                            <br />
                                            <small class="text-muted">@employe.Poste</small>
                                        </div>
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => AddMemberToTeam(employe)">
                                            <i class="bi bi-plus"></i>
                                        </button>
                                    </div>
                                }
                                @if (!availableEmployees.Where(e => e.EquipeId == null && e.EstActif).Any())
                                {
                                    <div class="text-center text-muted py-3">
                                        <i class="bi bi-person-plus fs-2"></i>
                                        <p>Aucun employé disponible</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="() => showMembersModal = false">
                        <i class="bi bi-check-circle me-1"></i>Terminer
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .stat-mini {
        padding: 0.5rem;
    }

    .stat-mini .stat-value {
        font-size: 1.2rem;
        font-weight: bold;
        color: var(--primary-color);
    }

    .stat-mini .stat-label {
        font-size: 0.75rem;
        color: #6c757d;
    }

    .config-info {
        background: #f8f9fa;
        padding: 0.5rem;
        border-radius: 5px;
    }
</style>

@code {
    private List<Equipe> teams = new();
    private List<Employe> availableEmployees = new();
    private List<Employe> selectedTeamMembers = new();
    private bool showDeleteTeamModal = false;
    private Equipe? teamToDelete;
    private bool showTeamModal = false;
    private bool showMembersModal = false;
    private Equipe? editingTeam;
    private Equipe? managingTeam;
    private bool isEditMode = false;
    private string? Message;
    private string MessageCssClass = "alert-info";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        teams = await TeamPlanningService.GetAllEquipesAsync(true);
        availableEmployees = await DbContext.Employes
            .Include(e => e.Equipe)
            .ToListAsync();
        StateHasChanged();
    }

    private void ShowAddTeamModal()
    {
        editingTeam = new Equipe 
        {
            EstActive = true,
            PresencesMinParJour = 2,
            PresencesMaxParJour = 4,
            PresencesMinParPersonne = 3,
            PresencesMaxParPersonne = 5,
            JoursCritiques = "[\"Lundi\",\"Mardi\",\"Vendredi\"]",
            PresencesMinJoursCritiques = 2
        };
        isEditMode = false;
        showTeamModal = true;
    }

    private void EditTeam(Equipe team)
    {
        editingTeam = new Equipe
        {
            Id = team.Id,
            Nom = team.Nom,
            Description = team.Description,
            CodeEquipe = team.CodeEquipe,
            EstActive = team.EstActive,
            ChefEquipeId = team.ChefEquipeId,
            PresencesMinParJour = team.PresencesMinParJour,
            PresencesMaxParJour = team.PresencesMaxParJour,
            PresencesMinParPersonne = team.PresencesMinParPersonne,
            PresencesMaxParPersonne = team.PresencesMaxParPersonne,
            JoursCritiques = team.JoursCritiques,
            PresencesMinJoursCritiques = team.PresencesMinJoursCritiques
        };
        isEditMode = true;
        showTeamModal = true;
    }

    private void ViewTeamDetails(int teamId)
    {
        Navigation.NavigateTo($"/teams/{teamId}");
    }

    private void ConfirmDeleteTeam(Equipe team)
    {
        teamToDelete = team;
        showDeleteTeamModal = true;
    }

    private async Task DeleteTeam()
    {
        if (teamToDelete == null) return;
        try
        {
            // Désaffecter les membres
            var membres = await DbContext.Employes.Where(e => e.EquipeId == teamToDelete.Id).ToListAsync();
            foreach (var membre in membres)
            {
                membre.EquipeId = null;
            }
            // Supprimer les affectations client
            var affectations = await DbContext.AffectationsEquipeClient.Where(a => a.EquipeId == teamToDelete.Id).ToListAsync();
            DbContext.AffectationsEquipeClient.RemoveRange(affectations);
            // Supprimer les affectations projet  
            var affectationsProjets = await DbContext.AffectationsEquipeProjet.Where(a => a.EquipeId == teamToDelete.Id).ToListAsync();
            DbContext.AffectationsEquipeProjet.RemoveRange(affectationsProjets);
            // Supprimer l'équipe
            DbContext.Equipes.Remove(teamToDelete);
            await DbContext.SaveChangesAsync();
            ToastService.ShowSuccess($"Équipe {teamToDelete.Nom} supprimée avec succès", "Suppression");
            showDeleteTeamModal = false;
            teamToDelete = null;
            await LoadData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de la suppression: {ex.Message}", "Erreur");
        }
    }

    private async Task SaveTeam()
    {
        if (editingTeam == null) return;

        try
        {
            // Validation
            if (string.IsNullOrWhiteSpace(editingTeam.Nom))
            {
                ToastService.ShowWarning("Le nom de l'équipe est requis", "Validation");
                return;
            }

            // Vérifier l'unicité du code équipe si spécifié
            if (!string.IsNullOrWhiteSpace(editingTeam.CodeEquipe))
            {
                var existingTeam = await DbContext.Equipes
                    .Where(e => e.CodeEquipe == editingTeam.CodeEquipe && e.Id != editingTeam.Id)
                    .FirstOrDefaultAsync();
                
                if (existingTeam != null)
                {
                    ToastService.ShowWarning("Ce code équipe est déjà utilisé", "Code dupliqué");
                    return;
                }
            }

            if (isEditMode)
            {
                var teamToUpdate = await DbContext.Equipes.FindAsync(editingTeam.Id);
                if (teamToUpdate != null)
                {
                    teamToUpdate.Nom = editingTeam.Nom;
                    teamToUpdate.Description = editingTeam.Description;
                    teamToUpdate.CodeEquipe = editingTeam.CodeEquipe;
                    teamToUpdate.EstActive = editingTeam.EstActive;
                    teamToUpdate.ChefEquipeId = editingTeam.ChefEquipeId;
                    teamToUpdate.PresencesMinParJour = editingTeam.PresencesMinParJour;
                    teamToUpdate.PresencesMaxParJour = editingTeam.PresencesMaxParJour;
                    teamToUpdate.PresencesMinParPersonne = editingTeam.PresencesMinParPersonne;
                    teamToUpdate.PresencesMaxParPersonne = editingTeam.PresencesMaxParPersonne;
                    teamToUpdate.PresencesMinJoursCritiques = editingTeam.PresencesMinJoursCritiques;

                    await DbContext.SaveChangesAsync();
                    ToastService.ShowSuccess($"Équipe {editingTeam.Nom} modifiée avec succès", "Modification");
                }
            }
            else
            {
                DbContext.Equipes.Add(editingTeam);
                await DbContext.SaveChangesAsync();
                ToastService.ShowSuccess($"Équipe {editingTeam.Nom} créée avec succès", "Création");
            }

            showTeamModal = false;
            editingTeam = null;
            await LoadData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de la sauvegarde: {ex.Message}", "Erreur");
        }
    }

    private void ManageTeamMembers(Equipe team)
    {
        managingTeam = team;
        selectedTeamMembers = availableEmployees.Where(e => e.EquipeId == team.Id).ToList();
        showMembersModal = true;
    }

    private async Task AddMemberToTeam(Employe employe)
    {
        try
        {
            employe.EquipeId = managingTeam!.Id;
            await DbContext.SaveChangesAsync();
            
            // Mettre à jour les listes locales
            selectedTeamMembers.Add(employe);
            ToastService.ShowSuccess($"{employe.Prenom} {employe.Nom} ajouté à l'équipe", "Membre ajouté");
            
            await LoadData(); // Recharger pour mettre à jour les statistiques
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de l'ajout: {ex.Message}", "Erreur");
        }
    }

    private async Task RemoveMemberFromTeam(Employe employe)
    {
        try
        {
            employe.EquipeId = null;
            await DbContext.SaveChangesAsync();
            
            // Mettre à jour les listes locales
            selectedTeamMembers.RemoveAll(m => m.Id == employe.Id);
            ToastService.ShowSuccess($"{employe.Prenom} {employe.Nom} retiré de l'équipe", "Membre retiré");
            
            await LoadData(); // Recharger pour mettre à jour les statistiques
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de la suppression: {ex.Message}", "Erreur");
        }
    }

    private void OnStatusChanged(ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            editingTeam.EstActive = value == "true";
        }
    }
}